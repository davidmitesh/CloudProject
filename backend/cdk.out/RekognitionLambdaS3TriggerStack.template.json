{
 "Resources": {
  "Bucket83908E77": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "PUT"
       ],
       "AllowedOrigins": [
        "*"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/Bucket/Resource"
   }
  },
  "BucketPolicyE9A3008A": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "Bucket83908E77"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "Bucket83908E77",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/Bucket/Policy/Resource"
   }
  },
  "BucketAutoDeleteObjectsCustomResourceBAFD23C2": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "Bucket83908E77"
    }
   },
   "DependsOn": [
    "BucketPolicyE9A3008A"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/Bucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "BucketNotifications8F2E257D": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "Bucket83908E77"
    },
    "NotificationConfiguration": {
     "TopicConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:Put"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".png"
          }
         ]
        }
       },
       "TopicArn": {
        "Ref": "ImgUploadTopic3B638E2B"
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "ImgUploadTopicPolicy246E92AE",
    "ImgUploadTopic3B638E2B"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/Bucket/Notifications/Resource"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "6c1e9b465fa4b2d651dbc9ce3e732d8702a7b19137327684a71d89f1d355f1a2.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "Bucket83908E77"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.6c1e9b465fa4b2d651dbc9ce3e732d8702a7b19137327684a71d89f1d355f1a2",
    "aws:asset:property": "Code"
   }
  },
  "Classifications0C921F6C": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "image_name",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "image_name",
      "KeyType": "HASH"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/Classifications/Resource"
   }
  },
  "RekFunctionServiceRole3947AEF4": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/RekFunction/ServiceRole/Resource"
   }
  },
  "RekFunctionServiceRoleDefaultPolicyD393AA84": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "rekognition:DetectLabels",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Classifications0C921F6C",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Bucket83908E77",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "sqs:ReceiveMessage",
        "sqs:ChangeMessageVisibility",
        "sqs:GetQueueUrl",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ImgUploadQueueB46CB7A8",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "RekFunctionServiceRoleDefaultPolicyD393AA84",
    "Roles": [
     {
      "Ref": "RekFunctionServiceRole3947AEF4"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/RekFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "RekFunction9837D13D": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "bacc75499ed8e9af232984d7f64281f4c7504aead3fdfc34169444e085fa1d62.zip"
    },
    "Environment": {
     "Variables": {
      "BUCKET_NAME": {
       "Ref": "Bucket83908E77"
      },
      "TABLE_NAME": {
       "Ref": "Classifications0C921F6C"
      }
     }
    },
    "Handler": "rekfunction.handler",
    "Role": {
     "Fn::GetAtt": [
      "RekFunctionServiceRole3947AEF4",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x"
   },
   "DependsOn": [
    "RekFunctionServiceRoleDefaultPolicyD393AA84",
    "RekFunctionServiceRole3947AEF4"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/RekFunction/Resource",
    "aws:asset:path": "asset.bacc75499ed8e9af232984d7f64281f4c7504aead3fdfc34169444e085fa1d62",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "RekFunctionLogRetention7F1C9E70": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "RekFunction9837D13D"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/RekFunction/LogRetention/Resource"
   }
  },
  "RekFunctionSqsEventSourceRekognitionLambdaS3TriggerStackImgUploadQueue013AA6089BB58F75": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "EventSourceArn": {
     "Fn::GetAtt": [
      "ImgUploadQueueB46CB7A8",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "RekFunction9837D13D"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/RekFunction/SqsEventSource:RekognitionLambdaS3TriggerStackImgUploadQueue013AA608/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:PutRetentionPolicy",
        "logs:DeleteRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": "nodejs18.x",
    "Timeout": 900,
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource",
    "aws:asset:path": "asset.4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "serviceFunctionServiceRole77C1C7AE": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/serviceFunction/ServiceRole/Resource"
   }
  },
  "serviceFunctionServiceRoleDefaultPolicy1960C355": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Bucket83908E77",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Classifications0C921F6C",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "serviceFunctionServiceRoleDefaultPolicy1960C355",
    "Roles": [
     {
      "Ref": "serviceFunctionServiceRole77C1C7AE"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/serviceFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "serviceFunction935310CC": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "5c5b3022dbfd57f41018f1152b36beb60ef9ccc423e5c65b41ecd51793de442b.zip"
    },
    "Environment": {
     "Variables": {
      "TABLE": {
       "Ref": "Classifications0C921F6C"
      },
      "BUCKET": {
       "Ref": "Bucket83908E77"
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "serviceFunctionServiceRole77C1C7AE",
      "Arn"
     ]
    },
    "Runtime": "python3.9"
   },
   "DependsOn": [
    "serviceFunctionServiceRoleDefaultPolicy1960C355",
    "serviceFunctionServiceRole77C1C7AE"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/serviceFunction/Resource",
    "aws:asset:path": "asset.5c5b3022dbfd57f41018f1152b36beb60ef9ccc423e5c65b41ecd51793de442b",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "imageAPI120CAF85": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "imageAPI"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Resource"
   }
  },
  "imageAPICloudWatchRole82F12D6C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/CloudWatchRole/Resource"
   }
  },
  "imageAPIAccount5B8B2C0D": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "imageAPICloudWatchRole82F12D6C",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "imageAPI120CAF85"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Account"
   }
  },
  "imageAPIDeploymentC5C81B859f737fbe54a2b70972ebd80cb176f2a8": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "imageAPI120CAF85"
    }
   },
   "DependsOn": [
    "imageAPIimagesDELETE6CD934A8",
    "imageAPIimagesGET5BB2A791",
    "imageAPIimagesOPTIONSF5131040",
    "imageAPIimages7612E63A",
    "imageAPIOPTIONS9CB98D09"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Deployment/Resource"
   }
  },
  "imageAPIDeploymentStageprodC0DF38A5": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "imageAPIDeploymentC5C81B859f737fbe54a2b70972ebd80cb176f2a8"
    },
    "RestApiId": {
     "Ref": "imageAPI120CAF85"
    },
    "StageName": "prod"
   },
   "DependsOn": [
    "imageAPIAccount5B8B2C0D"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/DeploymentStage.prod/Resource"
   }
  },
  "imageAPIOPTIONS9CB98D09": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "imageAPI120CAF85",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "imageAPI120CAF85"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/OPTIONS/Resource"
   }
  },
  "imageAPIimages7612E63A": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "imageAPI120CAF85",
      "RootResourceId"
     ]
    },
    "PathPart": "images",
    "RestApiId": {
     "Ref": "imageAPI120CAF85"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/images/Resource"
   }
  },
  "imageAPIimagesOPTIONSF5131040": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "imageAPIimages7612E63A"
    },
    "RestApiId": {
     "Ref": "imageAPI120CAF85"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/images/OPTIONS/Resource"
   }
  },
  "imageAPIimagesGETApiPermissionRekognitionLambdaS3TriggerStackimageAPI61222CA5GETimagesB7B3585B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "serviceFunction935310CC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "imageAPI120CAF85"
       },
       "/",
       {
        "Ref": "imageAPIDeploymentStageprodC0DF38A5"
       },
       "/GET/images"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/images/GET/ApiPermission.RekognitionLambdaS3TriggerStackimageAPI61222CA5.GET..images"
   }
  },
  "imageAPIimagesGETApiPermissionTestRekognitionLambdaS3TriggerStackimageAPI61222CA5GETimages79DA4956": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "serviceFunction935310CC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "imageAPI120CAF85"
       },
       "/test-invoke-stage/GET/images"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/images/GET/ApiPermission.Test.RekognitionLambdaS3TriggerStackimageAPI61222CA5.GET..images"
   }
  },
  "imageAPIimagesGET5BB2A791": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "APIGatewayAuthorizer"
    },
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "StatusCode": "200"
      },
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "SelectionPattern": "(\n|.)+",
       "StatusCode": "500"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestParameters": {
      "integration.request.querystring.action": "method.request.querystring.action",
      "integration.request.querystring.key": "method.request.querystring.key"
     },
     "RequestTemplates": {
      "application/json": "{\"action\":\"$util.escapeJavaScript($input.params('action'))\",\"key\":\"$util.escapeJavaScript($input.params('key'))\"}"
     },
     "Type": "AWS",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "serviceFunction935310CC",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     },
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "500"
     }
    ],
    "RequestParameters": {
     "method.request.querystring.action": true,
     "method.request.querystring.key": true
    },
    "ResourceId": {
     "Ref": "imageAPIimages7612E63A"
    },
    "RestApiId": {
     "Ref": "imageAPI120CAF85"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/images/GET/Resource"
   }
  },
  "imageAPIimagesDELETEApiPermissionRekognitionLambdaS3TriggerStackimageAPI61222CA5DELETEimagesCE2891AB": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "serviceFunction935310CC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "imageAPI120CAF85"
       },
       "/",
       {
        "Ref": "imageAPIDeploymentStageprodC0DF38A5"
       },
       "/DELETE/images"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/images/DELETE/ApiPermission.RekognitionLambdaS3TriggerStackimageAPI61222CA5.DELETE..images"
   }
  },
  "imageAPIimagesDELETEApiPermissionTestRekognitionLambdaS3TriggerStackimageAPI61222CA5DELETEimagesE71DF0F3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "serviceFunction935310CC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "imageAPI120CAF85"
       },
       "/test-invoke-stage/DELETE/images"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/images/DELETE/ApiPermission.Test.RekognitionLambdaS3TriggerStackimageAPI61222CA5.DELETE..images"
   }
  },
  "imageAPIimagesDELETE6CD934A8": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "APIGatewayAuthorizer"
    },
    "HttpMethod": "DELETE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "StatusCode": "200"
      },
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "SelectionPattern": "(\n|.)+",
       "StatusCode": "500"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestParameters": {
      "integration.request.querystring.action": "method.request.querystring.action",
      "integration.request.querystring.key": "method.request.querystring.key"
     },
     "RequestTemplates": {
      "application/json": "{\"action\":\"$util.escapeJavaScript($input.params('action'))\",\"key\":\"$util.escapeJavaScript($input.params('key'))\"}"
     },
     "Type": "AWS",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "serviceFunction935310CC",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     },
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "500"
     }
    ],
    "RequestParameters": {
     "method.request.querystring.action": true,
     "method.request.querystring.key": true
    },
    "ResourceId": {
     "Ref": "imageAPIimages7612E63A"
    },
    "RestApiId": {
     "Ref": "imageAPI120CAF85"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/imageAPI/Default/images/DELETE/Resource"
   }
  },
  "UserPool6BA7E5F2": {
   "Type": "AWS::Cognito::UserPool",
   "Properties": {
    "AccountRecoverySetting": {
     "RecoveryMechanisms": [
      {
       "Name": "verified_phone_number",
       "Priority": 1
      },
      {
       "Name": "verified_email",
       "Priority": 2
      }
     ]
    },
    "AdminCreateUserConfig": {
     "AllowAdminCreateUserOnly": false
    },
    "AliasAttributes": [
     "email"
    ],
    "AutoVerifiedAttributes": [
     "email"
    ],
    "EmailVerificationMessage": "The verification code to your new account is {####}",
    "EmailVerificationSubject": "Verify your new account",
    "SmsVerificationMessage": "The verification code to your new account is {####}",
    "VerificationMessageTemplate": {
     "DefaultEmailOption": "CONFIRM_WITH_CODE",
     "EmailMessage": "The verification code to your new account is {####}",
     "EmailSubject": "Verify your new account",
     "SmsMessage": "The verification code to your new account is {####}"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/UserPool/Resource"
   }
  },
  "UserPoolClient2F5918F7": {
   "Type": "AWS::Cognito::UserPoolClient",
   "Properties": {
    "AllowedOAuthFlows": [
     "implicit",
     "code"
    ],
    "AllowedOAuthFlowsUserPoolClient": true,
    "AllowedOAuthScopes": [
     "profile",
     "phone",
     "email",
     "openid",
     "aws.cognito.signin.user.admin"
    ],
    "CallbackURLs": [
     "https://example.com"
    ],
    "GenerateSecret": false,
    "SupportedIdentityProviders": [
     "COGNITO"
    ],
    "UserPoolId": {
     "Ref": "UserPool6BA7E5F2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/UserPoolClient/Resource"
   }
  },
  "ImageRekognitionIdentityPool": {
   "Type": "AWS::Cognito::IdentityPool",
   "Properties": {
    "AllowUnauthenticatedIdentities": false,
    "CognitoIdentityProviders": [
     {
      "ClientId": {
       "Ref": "UserPoolClient2F5918F7"
      },
      "ProviderName": {
       "Fn::GetAtt": [
        "UserPool6BA7E5F2",
        "ProviderName"
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImageRekognitionIdentityPool"
   }
  },
  "APIGatewayAuthorizer": {
   "Type": "AWS::ApiGateway::Authorizer",
   "Properties": {
    "IdentitySource": "method.request.header.Authorization",
    "Name": "customer-authorizer",
    "ProviderARNs": [
     {
      "Fn::GetAtt": [
       "UserPool6BA7E5F2",
       "Arn"
      ]
     }
    ],
    "RestApiId": {
     "Ref": "imageAPI120CAF85"
    },
    "Type": "COGNITO_USER_POOLS"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/APIGatewayAuthorizer"
   }
  },
  "ImageRekognitionAuthenticatedRole6DF4FE58": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRoleWithWebIdentity",
       "Condition": {
        "StringEquals": {
         "cognito-identity.amazonaws.com:aud": {
          "Ref": "ImageRekognitionIdentityPool"
         }
        },
        "ForAnyValue:StringLike": {
         "cognito-identity.amazonaws.com:amr": "authenticated"
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Federated": "cognito-identity.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImageRekognitionAuthenticatedRole/Resource"
   }
  },
  "ImageRekognitionAuthenticatedRoleDefaultPolicy2D289455": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/private/${cognito-identity.amazonaws.com:sub}/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/private/${cognito-identity.amazonaws.com:sub}"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:ListBucket",
       "Condition": {
        "StringLike": {
         "s3:prefix": [
          "private/${cognito-identity.amazonaws.com:sub}/*"
         ]
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Bucket83908E77",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ImageRekognitionAuthenticatedRoleDefaultPolicy2D289455",
    "Roles": [
     {
      "Ref": "ImageRekognitionAuthenticatedRole6DF4FE58"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImageRekognitionAuthenticatedRole/DefaultPolicy/Resource"
   }
  },
  "IdentityPoolRoleAttachment": {
   "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
   "Properties": {
    "IdentityPoolId": {
     "Ref": "ImageRekognitionIdentityPool"
    },
    "Roles": {
     "authenticated": {
      "Fn::GetAtt": [
       "ImageRekognitionAuthenticatedRole6DF4FE58",
       "Arn"
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/IdentityPoolRoleAttachment"
   }
  },
  "ImgUploadDeadLetterQueue7F296786": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 604800,
    "QueueName": "ImgUploadDeadLetterQueue"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImgUploadDeadLetterQueue/Resource"
   }
  },
  "ImgUploadQueueB46CB7A8": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "QueueName": "ImgUploadQueue",
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "ImgUploadDeadLetterQueue7F296786",
       "Arn"
      ]
     },
     "maxReceiveCount": 1
    },
    "VisibilityTimeout": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImgUploadQueue/Resource"
   }
  },
  "ImgUploadQueuePolicyAAA704B0": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "ImgUploadTopic3B638E2B"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "ImgUploadQueueB46CB7A8",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "ImgUploadQueueB46CB7A8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImgUploadQueue/Policy/Resource"
   }
  },
  "ImgUploadQueueRekognitionLambdaS3TriggerStackImgUploadTopicFB494C5D19256102": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "ImgUploadQueueB46CB7A8",
      "Arn"
     ]
    },
    "Protocol": "sqs",
    "RawMessageDelivery": true,
    "TopicArn": {
     "Ref": "ImgUploadTopic3B638E2B"
    }
   },
   "DependsOn": [
    "ImgUploadQueuePolicyAAA704B0"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImgUploadQueue/RekognitionLambdaS3TriggerStackImgUploadTopicFB494C5D/Resource"
   }
  },
  "ImgUploadTopic3B638E2B": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "TopicName": "ImgUploadTopic"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImgUploadTopic/Resource"
   }
  },
  "ImgUploadTopicPolicy246E92AE": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "Bucket83908E77",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Ref": "ImgUploadTopic3B638E2B"
       },
       "Sid": "0"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "ImgUploadTopic3B638E2B"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/ImgUploadTopic/Policy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def with_id(n):\n    n['Id'] = f\"{stack_id}-{hash(json.dumps(n, sort_keys=True))}\"\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        ids = [with_id(n) for n in old.get(t, [])]\n        old_incoming_ids = [n['Id'] for n in ids]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21SwW7bMAz9lt4VdW0O69XNNqBAi6ZOdy5kmXPY2KJnUglcwf8+SHZiF+tFfI+UxKcn3uqb9Z3+dmVOvLLlYVVjocNOjD0oc+K3wGsd7r09gKjNHzehMWypRtvP6YmP5N4wDKrsnWmoLHR4NUUNcW8Cg6pNU5RGh1/eWUFysXTBP4/gZEe+s/Bk2hZdFctfZ7fQNciM5AaFptEhp7FRirPGEQ2K12+GGYR1FoOqqWL9SFUOAi51Ny1WRuBkeh0ek8wcWLIW060zzKwl70T9gLamvgGXLFqwnZgqSRlBDpzER2vUE8ieylic0Lk6NbngzMueOvyAblCWKodCOvxm6LZEddxwwWewqXHS8n/moYyPlP58eMmjYZmIsfuoflD8l3V48eCTjhGkdTZ1QQfFjnXY+YJth+35Tz/xV2rRpiFIIK3zZQs6DGrjWaj52pVPpW1HRyyhS7amP412x+lYHn720vpkwYZciZLmxVEJ+p2vj7c3+rteX70z4qrzTrABnY/xH+BHspkhAwAA"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionLambdaS3TriggerStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "UploadImageToS3": {
   "Description": "Upload an image to S3 (using AWS CLI) to trigger Rekognition",
   "Value": {
    "Fn::Join": [
     "",
     [
      "aws s3 cp <local-path-to-image> s3://",
      {
       "Ref": "Bucket83908E77"
      },
      "/"
     ]
    ]
   }
  },
  "DynamoDBTable": {
   "Description": "This is where the image Rekognition results will be stored.",
   "Value": {
    "Ref": "Classifications0C921F6C"
   }
  },
  "LambdaFunction": {
   "Value": {
    "Ref": "RekFunction9837D13D"
   }
  },
  "LambdaFunctionLogs": {
   "Value": {
    "Fn::GetAtt": [
     "RekFunctionLogRetention7F1C9E70",
     "LogGroupName"
    ]
   }
  },
  "imageAPIEndpointD64DB231": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "imageAPI120CAF85"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "imageAPIDeploymentStageprodC0DF38A5"
      },
      "/"
     ]
    ]
   }
  },
  "UserPoolId": {
   "Value": {
    "Ref": "UserPool6BA7E5F2"
   }
  },
  "AppClientId": {
   "Value": {
    "Ref": "UserPoolClient2F5918F7"
   }
  },
  "IdentityPoolId": {
   "Value": {
    "Ref": "ImageRekognitionIdentityPool"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}