"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const client_rekognition_1 = require("@aws-sdk/client-rekognition");
const client = new client_rekognition_1.Rekognition();
const handler = async (event = {}) => {
    // console.log("Image upload event:", JSON.stringify(event, undefined, 2));
    var body = JSON.parse(event.Records[0].body);
    console.log(body);
    var key = body.Records[0].s3.object.key;
    console.log(key);
    key = key.replace("%3A", ":");
    // console.log(key);
    const params = {
        Image: {
            S3Object: {
                Bucket: process.env.BUCKET_NAME,
                Name: key
            },
        },
        MaxLabels: 10,
        MinConfidence: 70
    };
    const response = await client.detectLabels(params);
    const labels = response.Labels || [];
    console.log(labels.map(i => i.Name).toString());
    // Write to DDB
    const tableName = process.env.TABLE_NAME || "";
    const dynamodb = new client_dynamodb_1.DynamoDB();
    const dynamodbParams = {
        TableName: tableName,
        Item: {
            image_name: { 'S': key },
            labels: { 'S': labels.map(i => i.Name).toString() }
        },
        ConditionExpression: 'attribute_not_exists(image_name)'
    };
    try {
        await dynamodb.putItem(dynamodbParams);
    }
    catch (err) {
        console.log(err);
    }
    return {
        'statusCode': 200,
        'body': event
    };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVrZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWtmdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBb0Q7QUFDcEQsb0VBQW9GO0FBRXBGLE1BQU0sTUFBTSxHQUFHLElBQUksZ0NBQVcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxRQUFhLEVBQUUsRUFBZ0IsRUFBRTtJQUMzRCwyRUFBMkU7SUFDM0UsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDakIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQTtJQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2hCLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUM3QixvQkFBb0I7SUFFcEIsTUFBTSxNQUFNLEdBQTZCO1FBQ3JDLEtBQUssRUFBRTtZQUNILFFBQVEsRUFBRTtnQkFDTixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO2dCQUMvQixJQUFJLEVBQUUsR0FBRzthQUNaO1NBQ0o7UUFDRCxTQUFTLEVBQUUsRUFBRTtRQUNiLGFBQWEsRUFBRSxFQUFFO0tBQ3BCLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFaEQsZUFBZTtJQUNmLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztJQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLDBCQUFRLEVBQUUsQ0FBQztJQUVoQyxNQUFNLGNBQWMsR0FBRztRQUNuQixTQUFTLEVBQUUsU0FBUztRQUNwQixJQUFJLEVBQUU7WUFDRixVQUFVLEVBQUUsRUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFDO1lBQ3RCLE1BQU0sRUFBRSxFQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFDO1NBQ3BEO1FBQ0QsbUJBQW1CLEVBQUUsa0NBQWtDO0tBQzFELENBQUM7SUFFRixJQUFJO1FBQ0EsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTSxHQUFHLEVBQUU7UUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3BCO0lBRUQsT0FBTztRQUNILFlBQVksRUFBRSxHQUFHO1FBQ2pCLE1BQU0sRUFBRSxLQUFLO0tBQ2QsQ0FBQztBQUNSLENBQUMsQ0FBQztBQWhEVyxRQUFBLE9BQU8sV0FnRGxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREIgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInO1xuaW1wb3J0IHsgRGV0ZWN0TGFiZWxzQ29tbWFuZElucHV0LCBSZWtvZ25pdGlvbiB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1yZWtvZ25pdGlvbic7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBSZWtvZ25pdGlvbigpO1xuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIkltYWdlIHVwbG9hZCBldmVudDpcIiwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIHVuZGVmaW5lZCwgMikpO1xuICAgIHZhciBib2R5ID0gSlNPTi5wYXJzZShldmVudC5SZWNvcmRzWzBdLmJvZHkpXG4gICAgY29uc29sZS5sb2coYm9keSlcbiAgICB2YXIga2V5ID0gYm9keS5SZWNvcmRzWzBdLnMzLm9iamVjdC5rZXlcbiAgICBjb25zb2xlLmxvZyhrZXkpXG4gICAga2V5ID0ga2V5LnJlcGxhY2UoXCIlM0FcIiwgXCI6XCIpXG4gICAgLy8gY29uc29sZS5sb2coa2V5KTtcblxuICAgIGNvbnN0IHBhcmFtczogRGV0ZWN0TGFiZWxzQ29tbWFuZElucHV0ID0ge1xuICAgICAgICBJbWFnZToge1xuICAgICAgICAgICAgUzNPYmplY3Q6IHtcbiAgICAgICAgICAgICAgICBCdWNrZXQ6IHByb2Nlc3MuZW52LkJVQ0tFVF9OQU1FLFxuICAgICAgICAgICAgICAgIE5hbWU6IGtleVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgTWF4TGFiZWxzOiAxMCxcbiAgICAgICAgTWluQ29uZmlkZW5jZTogNzBcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZGV0ZWN0TGFiZWxzKHBhcmFtcyk7XG4gICAgY29uc3QgbGFiZWxzID0gcmVzcG9uc2UuTGFiZWxzIHx8IFtdO1xuICAgIGNvbnNvbGUubG9nKGxhYmVscy5tYXAoaSA9PiBpLk5hbWUpLnRvU3RyaW5nKCkpO1xuXG4gICAgLy8gV3JpdGUgdG8gRERCXG4gICAgY29uc3QgdGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCBcIlwiO1xuICAgIGNvbnN0IGR5bmFtb2RiID0gbmV3IER5bmFtb0RCKCk7XG5cbiAgICBjb25zdCBkeW5hbW9kYlBhcmFtcyA9IHtcbiAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgICAgIEl0ZW06IHtcbiAgICAgICAgICAgIGltYWdlX25hbWU6IHsnUyc6IGtleX0sXG4gICAgICAgICAgICBsYWJlbHM6IHsnUyc6IGxhYmVscy5tYXAoaSA9PiBpLk5hbWUpLnRvU3RyaW5nKCl9XG4gICAgICAgIH0sXG4gICAgICAgIENvbmRpdGlvbkV4cHJlc3Npb246ICdhdHRyaWJ1dGVfbm90X2V4aXN0cyhpbWFnZV9uYW1lKSdcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZHluYW1vZGIucHV0SXRlbShkeW5hbW9kYlBhcmFtcyk7XG4gICAgfVxuICAgIGNhdGNoKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICAnc3RhdHVzQ29kZSc6IDIwMCxcbiAgICAgICAgJ2JvZHknOiBldmVudFxuICAgICAgfTtcbn07XG4iXX0=