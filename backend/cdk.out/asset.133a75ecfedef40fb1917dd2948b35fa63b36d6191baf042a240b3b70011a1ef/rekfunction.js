"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const client_rekognition_1 = require("@aws-sdk/client-rekognition");
const client = new client_rekognition_1.Rekognition();
const handler = async (event = {}) => {
    console.log("Image upload event:", JSON.stringify(event, undefined, 2));
    var key = event.Records[0].s3.object.key;
    key = key.replace("%3A", ":");
    console.log(key);
    const params = {
        Image: {
            S3Object: {
                Bucket: process.env.BUCKET_NAME,
                Name: key
            },
        },
        MaxLabels: 10,
        MinConfidence: 70
    };
    const response = await client.detectLabels(params);
    const labels = response.Labels || [];
    console.log(labels.map(i => i.Name).toString());
    // Write to DDB
    const tableName = process.env.TABLE_NAME || "";
    const dynamodb = new client_dynamodb_1.DynamoDB();
    const dynamodbParams = {
        TableName: tableName,
        Item: {
            image_name: { 'S': key },
            labels: { 'S': labels.map(i => i.Name).toString() }
        },
        ConditionExpression: 'attribute_not_exists(image_name)'
    };
    try {
        await dynamodb.putItem(dynamodbParams);
    }
    catch (err) {
        console.log(err);
    }
    return {
        'statusCode': 200,
        'body': event
    };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVrZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWtmdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBb0Q7QUFDcEQsb0VBQW9GO0FBRXBGLE1BQU0sTUFBTSxHQUFHLElBQUksZ0NBQVcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxRQUFhLEVBQUUsRUFBZ0IsRUFBRTtJQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDeEMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFakIsTUFBTSxNQUFNLEdBQTZCO1FBQ3JDLEtBQUssRUFBRTtZQUNILFFBQVEsRUFBRTtnQkFDTixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO2dCQUMvQixJQUFJLEVBQUUsR0FBRzthQUNaO1NBQ0o7UUFDRCxTQUFTLEVBQUUsRUFBRTtRQUNiLGFBQWEsRUFBRSxFQUFFO0tBQ3BCLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFaEQsZUFBZTtJQUNmLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztJQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLDBCQUFRLEVBQUUsQ0FBQztJQUVoQyxNQUFNLGNBQWMsR0FBRztRQUNuQixTQUFTLEVBQUUsU0FBUztRQUNwQixJQUFJLEVBQUU7WUFDRixVQUFVLEVBQUUsRUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFDO1lBQ3RCLE1BQU0sRUFBRSxFQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFDO1NBQ3BEO1FBQ0QsbUJBQW1CLEVBQUUsa0NBQWtDO0tBQzFELENBQUM7SUFFRixJQUFJO1FBQ0EsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTSxHQUFHLEVBQUU7UUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3BCO0lBRUQsT0FBTztRQUNILFlBQVksRUFBRSxHQUFHO1FBQ2pCLE1BQU0sRUFBRSxLQUFLO0tBQ2QsQ0FBQztBQUNSLENBQUMsQ0FBQztBQTdDVyxRQUFBLE9BQU8sV0E2Q2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREIgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInO1xuaW1wb3J0IHsgRGV0ZWN0TGFiZWxzQ29tbWFuZElucHV0LCBSZWtvZ25pdGlvbiB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1yZWtvZ25pdGlvbic7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBSZWtvZ25pdGlvbigpO1xuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIkltYWdlIHVwbG9hZCBldmVudDpcIiwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIHVuZGVmaW5lZCwgMikpO1xuICAgIHZhciBrZXkgPSBldmVudC5SZWNvcmRzWzBdLnMzLm9iamVjdC5rZXlcbiAgICBrZXkgPSBrZXkucmVwbGFjZShcIiUzQVwiLCBcIjpcIilcbiAgICBjb25zb2xlLmxvZyhrZXkpO1xuXG4gICAgY29uc3QgcGFyYW1zOiBEZXRlY3RMYWJlbHNDb21tYW5kSW5wdXQgPSB7XG4gICAgICAgIEltYWdlOiB7XG4gICAgICAgICAgICBTM09iamVjdDoge1xuICAgICAgICAgICAgICAgIEJ1Y2tldDogcHJvY2Vzcy5lbnYuQlVDS0VUX05BTUUsXG4gICAgICAgICAgICAgICAgTmFtZToga2V5XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBNYXhMYWJlbHM6IDEwLFxuICAgICAgICBNaW5Db25maWRlbmNlOiA3MFxuICAgIH07XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5kZXRlY3RMYWJlbHMocGFyYW1zKTtcbiAgICBjb25zdCBsYWJlbHMgPSByZXNwb25zZS5MYWJlbHMgfHwgW107XG4gICAgY29uc29sZS5sb2cobGFiZWxzLm1hcChpID0+IGkuTmFtZSkudG9TdHJpbmcoKSk7XG5cbiAgICAvLyBXcml0ZSB0byBEREJcbiAgICBjb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIHx8IFwiXCI7XG4gICAgY29uc3QgZHluYW1vZGIgPSBuZXcgRHluYW1vREIoKTtcblxuICAgIGNvbnN0IGR5bmFtb2RiUGFyYW1zID0ge1xuICAgICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICAgICAgSXRlbToge1xuICAgICAgICAgICAgaW1hZ2VfbmFtZTogeydTJzoga2V5fSxcbiAgICAgICAgICAgIGxhYmVsczogeydTJzogbGFiZWxzLm1hcChpID0+IGkuTmFtZSkudG9TdHJpbmcoKX1cbiAgICAgICAgfSxcbiAgICAgICAgQ29uZGl0aW9uRXhwcmVzc2lvbjogJ2F0dHJpYnV0ZV9ub3RfZXhpc3RzKGltYWdlX25hbWUpJ1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBkeW5hbW9kYi5wdXRJdGVtKGR5bmFtb2RiUGFyYW1zKTtcbiAgICB9XG4gICAgY2F0Y2goZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgICdzdGF0dXNDb2RlJzogMjAwLFxuICAgICAgICAnYm9keSc6IGV2ZW50XG4gICAgICB9O1xufTtcbiJdfQ==